import Together from "together-ai";
import dotenv from 'dotenv';

dotenv.config();

const TOGETHER_API_KEY = process.env.META_API_KEY;

class AIService {
  constructor() {
    if (!TOGETHER_API_KEY) {
      throw new Error('META_API_KEY environment variable is required');
    }
    this.together = new Together({ apiKey: TOGETHER_API_KEY });
  }

  async generateLeadsFromText(text, count = 5) {
    try {
      const prompt = `You are a lead generation AI. Analyze the following text and generate exactly ${count} business leads.

IMPORTANT: You must return ONLY a valid JSON array. Do not include any explanations, thinking, or other text.

Text to analyze: "${text}"

Generate ${count} leads with these exact fields:
- name: (extract from text or generate realistic name)
- email: (generate realistic business email)
- phone: (generate realistic phone number)
- company: (extract from text or generate realistic company)
- source: (where this lead came from)
- notes: (relevant information from the text)

Return ONLY this JSON format (no other text):
[
  {
    "name": "John Smith",
    "email": "john.smith@company.com",
    "phone": "+1-555-123-4567",
    "company": "Tech Solutions Inc",
    "source": "Website Contact",
    "notes": "Interested in software solutions"
  }
]`;

      const response = await this.together.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are a lead generation AI. Always respond with valid JSON arrays only. Never include explanations or thinking text."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "Qwen/Qwen3-235B-A22B-Thinking-2507",
        max_tokens: 3000,
        temperature: 0.3
      });

      const content = response.choices[0].message.content;
      
      // Extract JSON from the response - handle thinking tags and other formats
      let jsonMatch = content.match(/\[[\s\S]*?\]/);
      
      // If no JSON array found, try to find JSON object
      if (!jsonMatch) {
        jsonMatch = content.match(/\{[\s\S]*?\}/);
        if (jsonMatch) {
          // If we found a single object, wrap it in an array
          try {
            const obj = JSON.parse(jsonMatch[0]);
            return [obj];
          } catch (parseError) {
            console.error('Failed to parse single JSON object:', parseError);
          }
        }
      }
      
      if (!jsonMatch) {
        console.error('AI Response content:', content);
        // If no JSON found, create a fallback lead
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }

      try {
        const leads = JSON.parse(jsonMatch[0]);
        // Validate that we have an array of objects with required fields
        if (Array.isArray(leads) && leads.length > 0) {
          return leads.map(lead => ({
            name: lead.name || 'Unknown',
            email: lead.email || 'unknown@example.com',
            phone: lead.phone || 'N/A',
            company: lead.company || 'Unknown Company',
            source: lead.source || 'AI Generated',
            notes: lead.notes || 'Generated by AI'
          }));
        } else {
          throw new Error('Invalid lead structure');
        }
      } catch (parseError) {
        console.error('Failed to parse JSON array:', parseError);
        console.error('Extracted JSON string:', jsonMatch[0]);
        // Return a fallback lead if parsing fails
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }
    } catch (error) {
      console.error('AI Service Error:', error.response?.data || error.message);
      throw new Error(`AI generation failed: ${error.response?.data?.error?.message || error.message}`);
    }
  }

  async generateLeadsFromWebsite(url, count = 5) {
    try {
      const prompt = `You are a lead generation AI. Based on the website URL "${url}", generate exactly ${count} business leads.

IMPORTANT: You must return ONLY a valid JSON array. Do not include any explanations, thinking, or other text.

Generate ${count} leads with these exact fields:
- name: (realistic business person name)
- email: (business email format)
- phone: (realistic phone number)
- company: (relevant industry company)
- source: (website research)
- notes: (why they might be interested)

Return ONLY this JSON format (no other text):
[
  {
    "name": "Sarah Johnson",
    "email": "sarah.johnson@healthcare.com",
    "phone": "+1-555-987-6543",
    "company": "Healthcare Solutions LLC",
    "source": "Website Research",
    "notes": "Looking for healthcare software solutions"
  }
]`;

      const response = await this.together.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are a lead generation AI. Always respond with valid JSON arrays only. Never include explanations or thinking text."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "Qwen/Qwen3-235B-A22B-Thinking-2507",
        max_tokens: 3000,
        temperature: 0.3
      });

      const content = response.choices[0].message.content;
      
      // Extract JSON from the response - handle thinking tags and other formats
      let jsonMatch = content.match(/\[[\s\S]*?\]/);
      
      // If no JSON array found, try to find JSON object
      if (!jsonMatch) {
        jsonMatch = content.match(/\{[\s\S]*?\}/);
        if (jsonMatch) {
          // If we found a single object, wrap it in an array
          try {
            const obj = JSON.parse(jsonMatch[0]);
            return [obj];
          } catch (parseError) {
            console.error('Failed to parse single JSON object:', parseError);
          }
        }
      }
      
      if (!jsonMatch) {
        console.error('AI Response content:', content);
        // If no JSON found, create a fallback lead
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }

      try {
        const leads = JSON.parse(jsonMatch[0]);
        // Validate that we have an array of objects with required fields
        if (Array.isArray(leads) && leads.length > 0) {
          return leads.map(lead => ({
            name: lead.name || 'Unknown',
            email: lead.email || 'unknown@example.com',
            phone: lead.phone || 'N/A',
            company: lead.company || 'Unknown Company',
            source: lead.source || 'AI Generated',
            notes: lead.notes || 'Generated by AI'
          }));
        } else {
          throw new Error('Invalid lead structure');
        }
      } catch (parseError) {
        console.error('Failed to parse JSON array:', parseError);
        console.error('Extracted JSON string:', jsonMatch[0]);
        // Return a fallback lead if parsing fails
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }
    } catch (error) {
      console.error('AI Service Error:', error.response?.data || error.message);
      throw new Error(`AI generation failed: ${error.response?.data?.error?.message || error.message}`);
    }
  }

  async generateLeadsFromIndustry(industry, location, count = 5) {
    try {
      const prompt = `You are a lead generation AI. Generate exactly ${count} business leads for companies in the ${industry} industry located in ${location}.

IMPORTANT: You must return ONLY a valid JSON array. Do not include any explanations, thinking, or other text.

Generate ${count} leads with these exact fields:
- name: (realistic business person name)
- email: (business email format)
- phone: (realistic phone number)
- company: (realistic company name in the industry)
- source: (industry research)
- notes: (potential business opportunity)

Return ONLY this JSON format (no other text):
[
  {
    "name": "Michael Chen",
    "email": "michael.chen@techstartup.com",
    "phone": "+1-555-456-7890",
    "company": "TechStart Solutions",
    "source": "Industry Research",
    "notes": "Startup looking for CRM solutions"
  }
]`;

      const response = await this.together.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are a lead generation AI. Always respond with valid JSON arrays only. Never include explanations or thinking text."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "Qwen/Qwen3-235B-A22B-Thinking-2507",
        max_tokens: 3000,
        temperature: 0.3
      });

      const content = response.choices[0].message.content;
      
      // Extract JSON from the response - handle thinking tags and other formats
      let jsonMatch = content.match(/\[[\s\S]*?\]/);
      
      // If no JSON array found, try to find JSON object
      if (!jsonMatch) {
        jsonMatch = content.match(/\{[\s\S]*?\}/);
        if (jsonMatch) {
          // If we found a single object, wrap it in an array
          try {
            const obj = JSON.parse(jsonMatch[0]);
            return [obj];
          } catch (parseError) {
            console.error('Failed to parse single JSON object:', parseError);
          }
        }
      }
      
      if (!jsonMatch) {
        console.error('AI Response content:', content);
        // If no JSON found, create a fallback lead
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }

      try {
        const leads = JSON.parse(jsonMatch[0]);
        // Validate that we have an array of objects with required fields
        if (Array.isArray(leads) && leads.length > 0) {
          return leads.map(lead => ({
            name: lead.name || 'Unknown',
            email: lead.email || 'unknown@example.com',
            phone: lead.phone || 'N/A',
            company: lead.company || 'Unknown Company',
            source: lead.source || 'AI Generated',
            notes: lead.notes || 'Generated by AI'
          }));
        } else {
          throw new Error('Invalid lead structure');
        }
      } catch (parseError) {
        console.error('Failed to parse JSON array:', parseError);
        console.error('Extracted JSON string:', jsonMatch[0]);
        // Return a fallback lead if parsing fails
        return [{
          name: 'AI Generated Lead',
          email: 'ai.generated@example.com',
          phone: '+1-555-000-0000',
          company: 'AI Generated Company',
          source: 'AI Generated',
          notes: 'Generated from AI analysis'
        }];
      }
    } catch (error) {
      console.error('AI Service Error:', error.response?.data || error.message);
      throw new Error(`AI generation failed: ${error.response?.data?.error?.message || error.message}`);
    }
  }
}

export default AIService; 