import AIService from '../services/aiService.js';
import * as Lead from '../models/Lead.js';

const aiService = new AIService();

// Generate leads from text input
export const generateLeadsFromText = async (req, res) => {
  try {
    const { text, count = 5, assigned_to } = req.body;
    
    if (!text) {
      return res.status(400).json({ error: 'Text is required' });
    }

    // Generate leads using AI
    const generatedLeads = await aiService.generateLeadsFromText(text, count);
    
    // Save leads to database with default values for missing fields
    const savedLeads = [];
    for (const leadData of generatedLeads) {
      const lead = await Lead.createLead({
        name: leadData.name || 'Unknown',
        email: leadData.email || 'unknown@example.com',
        phone: leadData.phone || 'N/A',
        company: leadData.company || 'Unknown Company',
        status: leadData.status || 'New',
        source: leadData.source || 'AI Generated',
        assigned_to: assigned_to || req.user.user_id,
        notes: leadData.notes || 'Generated by AI'
      });
      savedLeads.push(lead);
    }

    res.status(201).json({
      message: `Successfully generated ${savedLeads.length} leads`,
      leads: savedLeads
    });

  } catch (error) {
    console.error('AI Lead Generation Error:', error);
    res.status(500).json({ 
      error: 'Failed to generate leads',
      details: error.message 
    });
  }
};

// Generate leads from website URL
export const generateLeadsFromWebsite = async (req, res) => {
  try {
    const { url, count = 5, assigned_to } = req.body;
    
    if (!url) {
      return res.status(400).json({ error: 'URL is required' });
    }

    // Validate URL format
    try {
      new URL(url);
    } catch {
      return res.status(400).json({ error: 'Invalid URL format' });
    }

    // Generate leads using AI
    const generatedLeads = await aiService.generateLeadsFromWebsite(url, count);
    
    // Save leads to database with default values for missing fields
    const savedLeads = [];
    for (const leadData of generatedLeads) {
      const lead = await Lead.createLead({
        name: leadData.name || 'Unknown',
        email: leadData.email || 'unknown@example.com',
        phone: leadData.phone || 'N/A',
        company: leadData.company || 'Unknown Company',
        status: leadData.status || 'New',
        source: leadData.source || 'AI Generated',
        assigned_to: assigned_to || req.user.user_id,
        notes: leadData.notes || 'Generated by AI'
      });
      savedLeads.push(lead);
    }

    res.status(201).json({
      message: `Successfully generated ${savedLeads.length} leads from website`,
      leads: savedLeads
    });

  } catch (error) {
    console.error('Website Lead Generation Error:', error);
    res.status(500).json({ 
      error: 'Failed to generate leads from website',
      details: error.message 
    });
  }
};

// Generate leads from industry and location
export const generateLeadsFromIndustry = async (req, res) => {
  try {
    const { industry, location, count = 5, assigned_to } = req.body;
    
    if (!industry || !location) {
      return res.status(400).json({ error: 'Industry and location are required' });
    }

    // Generate leads using AI
    const generatedLeads = await aiService.generateLeadsFromIndustry(industry, location, count);
    
    // Save leads to database with default values for missing fields
    const savedLeads = [];
    for (const leadData of generatedLeads) {
      const lead = await Lead.createLead({
        name: leadData.name || 'Unknown',
        email: leadData.email || 'unknown@example.com',
        phone: leadData.phone || 'N/A',
        company: leadData.company || 'Unknown Company',
        status: leadData.status || 'New',
        source: leadData.source || 'AI Generated',
        assigned_to: assigned_to || req.user.user_id,
        notes: leadData.notes || 'Generated by AI'
      });
      savedLeads.push(lead);
    }

    res.status(201).json({
      message: `Successfully generated ${savedLeads.length} leads for ${industry} industry in ${location}`,
      leads: savedLeads
    });

  } catch (error) {
    console.error('Industry Lead Generation Error:', error);
    res.status(500).json({ 
      error: 'Failed to generate leads from industry',
      details: error.message 
    });
  }
};

// Preview generated leads without saving (for testing)
export const previewGeneratedLeads = async (req, res) => {
  try {
    const { type, data, count = 5 } = req.body;
    
    if (!type || !data) {
      return res.status(400).json({ error: 'Type and data are required' });
    }

    let generatedLeads = [];

    switch (type) {
      case 'text':
        generatedLeads = await aiService.generateLeadsFromText(data, count);
        break;
      case 'website':
        generatedLeads = await aiService.generateLeadsFromWebsite(data, count);
        break;
      case 'industry':
        const { industry, location } = data;
        if (!industry || !location) {
          return res.status(400).json({ error: 'Industry and location are required' });
        }
        generatedLeads = await aiService.generateLeadsFromIndustry(industry, location, count);
        break;
      default:
        return res.status(400).json({ error: 'Invalid type. Use: text, website, or industry' });
    }

    res.json({
      message: `Preview of ${generatedLeads.length} generated leads`,
      leads: generatedLeads
    });

  } catch (error) {
    console.error('Preview Generation Error:', error);
    res.status(500).json({ 
      error: 'Failed to preview generated leads',
      details: error.message 
    });
  }
}; 